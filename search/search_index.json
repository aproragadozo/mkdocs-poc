{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Thank you for your interest in our POC Paragraphs are separated by a blank line. 2nd paragraph. Italic , bold , and monospace . I wonder if collapsible sections work: Click to expand! Heading A numbered list With some Sub bullets Itemized lists look like this: this one that one the other one The content between the two horizontal lines below is transcluded from alma.txt . A header, for no real reason This is some content that I'd like to include in some other files: Let's see if code works: class Person : def __init__ ( self , name , age ): self . name = name self . age = age def myfunc ( self ): print ( \"Hello my name is \" + self . name ) Bash #!/bin/bash STR = \"Hello World!\" echo $STR C #include int main(void) { printf ( \"hello, world \\n \" ); } C++ #include <iostream> int main () { std :: cout << \"Hello, world! \\n \" ; return 0 ; } C# using System ; class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello, world!\" ); } } Block quotes are written like so. They can span multiple paragraphs, if you like. Use 3 dashes for an em-dash (---). Use 2 dashes for ranges (e.g. \"It's all in chapters 12--14.\"). Three dots ... will be converted to an ellipsis. Unicode is supported.\u263a An h2 header Here's a numbered list: first item second item third item You can optionally mark the delimited block for Pandoc to syntax highlight it: import time # Quick, count to ten! for i in range ( 10 ): # (but not *too* quick) time . sleep ( 0.5 ) print i An h3 header Now a nested list: First, get these ingredients: carrots celery lentils Boil some water. Dump everything in the pot and follow this algorithm: find wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done) Note Do not bump wooden spoon or it will fall. Notice again how text always lines up on 4-space indents (including that last line which continues item 3 above). Here's a link to a website . Tables can look like this: size material color 9 leather brown 10 hemp canvas natural 11 glass transparent","title":"The POC welcomes you!"},{"location":"#title-header","text":"Paragraphs are separated by a blank line. 2nd paragraph. Italic , bold , and monospace . I wonder if collapsible sections work: Click to expand!","title":"Thank you for your interest in our POC"},{"location":"#a-header-for-no-real-reason","text":"This is some content that I'd like to include in some other files: Let's see if code works: class Person : def __init__ ( self , name , age ): self . name = name self . age = age def myfunc ( self ): print ( \"Hello my name is \" + self . name ) Bash #!/bin/bash STR = \"Hello World!\" echo $STR C #include int main(void) { printf ( \"hello, world \\n \" ); } C++ #include <iostream> int main () { std :: cout << \"Hello, world! \\n \" ; return 0 ; } C# using System ; class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello, world!\" ); } } Block quotes are written like so. They can span multiple paragraphs, if you like. Use 3 dashes for an em-dash (---). Use 2 dashes for ranges (e.g. \"It's all in chapters 12--14.\"). Three dots ... will be converted to an ellipsis. Unicode is supported.\u263a","title":"A header, for no real reason"},{"location":"#an-h2-header","text":"Here's a numbered list: first item second item third item You can optionally mark the delimited block for Pandoc to syntax highlight it: import time # Quick, count to ten! for i in range ( 10 ): # (but not *too* quick) time . sleep ( 0.5 ) print i","title":"An h2 header"},{"location":"#an-h3-header","text":"Now a nested list: First, get these ingredients: carrots celery lentils Boil some water. Dump everything in the pot and follow this algorithm: find wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done) Note Do not bump wooden spoon or it will fall. Notice again how text always lines up on 4-space indents (including that last line which continues item 3 above). Here's a link to a website . Tables can look like this: size material color 9 leather brown 10 hemp canvas natural 11 glass transparent","title":"An h3 header"},{"location":"alma/bar/","text":"Bar Admonition Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. def swap_variables : # To take input from the user # x = input('Enter value of x: ') # y = input('Enter value of y: ') x = 5 y = 10 # create a temporary variable and swap the values temp = x x = y y = temp print ( 'The value of x after swapping: {}' . format ( x )) print ( 'The value of y after swapping: {}' . format ( y ))","title":"Bar"},{"location":"alma/bar/#bar","text":"Admonition Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. def swap_variables : # To take input from the user # x = input('Enter value of x: ') # y = input('Enter value of y: ') x = 5 y = 10 # create a temporary variable and swap the values temp = x x = y y = temp print ( 'The value of x after swapping: {}' . format ( x )) print ( 'The value of y after swapping: {}' . format ( y ))","title":"Bar"},{"location":"alma/foo/","text":"Foo def is_prime : num = 407 # take input from the user # num = int(input(\"Enter a number: \")) # prime numbers are greater than 1 if num > 1 : # check for factors for i in range ( 2 , num ): if ( num % i ) == 0 : print ( num , \"is not a prime number\" ) print ( i , \"times\" , num // i , \"is\" , num ) break else : print ( num , \"is a prime number\" ) # if input number is less than # or equal to 1, it is not prime else : print ( num , \"is not a prime number\" ) Can you click it? YES! WE CAN!","title":"Foo"},{"location":"alma/foo/#foo","text":"def is_prime : num = 407 # take input from the user # num = int(input(\"Enter a number: \")) # prime numbers are greater than 1 if num > 1 : # check for factors for i in range ( 2 , num ): if ( num % i ) == 0 : print ( num , \"is not a prime number\" ) print ( i , \"times\" , num // i , \"is\" , num ) break else : print ( num , \"is a prime number\" ) # if input number is less than # or equal to 1, it is not prime else : print ( num , \"is not a prime number\" ) Can you click it?","title":"Foo"},{"location":"barack/baz/","text":"Baz Adding some footnotes 1 here. Does this show up in the TOC? See foobar . Check how this is displayed in the TOC Does my nesting make me look fat? This is the footnotes content. \u21a9","title":"Baz"},{"location":"barack/baz/#baz","text":"Adding some footnotes 1 here.","title":"Baz"},{"location":"barack/baz/#does-this-show-up-in-the-toc","text":"See foobar .","title":"Does this show up in the TOC?"},{"location":"barack/baz/#check-how-this-is-displayed-in-the-toc","text":"","title":"Check how this is displayed in the TOC"},{"location":"barack/baz/#does-my-nesting-make-me-look-fat","text":"This is the footnotes content. \u21a9","title":"Does my nesting make me look fat?"},{"location":"barack/foobar/","text":"Foobar Here's an image: I hope you like my lovely caption! Let me try and link back to one of the headers on the welcome page. Click here to see if it worked.","title":"Foobar"},{"location":"barack/foobar/#foobar","text":"Here's an image: I hope you like my lovely caption! Let me try and link back to one of the headers on the welcome page. Click here to see if it worked.","title":"Foobar"}]}